def main(in_file_name: str, out_file_name: str):
    """
    Основная функция.
    Ищет пользователя по имени и фамилии, создает новую таблицу со средней оценкой по классу
    :param in_file_name: Название файла для обработки
    :param out_file_name: Название файла для сохранения
    """
    file = open(in_file_name)
    file.readline()
    data_file = []
    for line in file.readlines():
        line = line.replace('\n', '')
        data = line.split('$')
        if len(data) < 4:
            data[4] = ''
        game_name = data[1]
        characters = data[2]
        name_error = data[3]
        date = data[4]

        data_file.append(tuple(data))

    file.close()

    data_new_file = 'klass,avg\n'
    for klass, data_klass in all_klass.items():
        sm_klass, count_klass = data_klass
        avg_klass = sm_klass / count_klass
        data_new_file += f'{klass},{avg_klass:.4}\n'

    new_f = open(out_file_name, 'w')
    new_f.write(data_new_file)
    new_f.close()


if __name__ == '__main__':
    main('game.txt', 'game_new.csv')


# В виртуальном мире видеоигр произошла непредвиденная ситуация. Внезапный программный сбой нарушил работу всех игровых
# персонажей, сделав их поведение хаотичным и непредсказуемым. Игровое сообщество столкнулось с массой проблем,
# поскольку многие игры стали практически непроходимыми из-за возникающих ошибок и лагов. Ваша задача разработать
# программу, способная обнаруживать и исправлять подобные ошибки, возвращая игровым персонажам должное поведение и
# делая прохождение игр вновь комфортным и приятным.
# Вы готовы приступать к задачам, но сначала необходимо создать репозиторий для проекта и задач, которые Вы будете
# выполнять. Обязательно сделайте его PUBLIC, а то мы не сможем проверить решение вашей последней задачи. Каждую задачу
# вам необходимо будет правильно оформить и залить в репозиторий. Код, который Вы напишете необходимо задокументировать,
# чтобы другие программисты могли понять, что делает код и за что отвечает. Примеры документирования приведены ниже.
# Задача 1
#
# Первая задача, которая стоит перед вами это найти все ошибки с содержанием числа 55, тк это особо важные и опасные
# ошибки. Для этого составьте отчет в формате:
# “У персонажа\t<characters>\tв игре\t<GameName>\tнашлась ошибка с кодом:\t <nameError>.\tДата фиксации:\t <date>”.
# После предоставления отчета измените значение ошибки на “Done”, а в поле дата поставьте “0000-00-00”  и полученные
# измененные данные сохраните в файле game_new.csv (загрузите файл в поле ответа).
#
# В задаче запрещено использование сторонних библиотек(Pandas и др)
#
# Не забудьте сделать комментарии к коду согласно стандартам документирования кода выбранного языка
# (для языка Python – PEP 257). После выполнения необходимо сделать локальные и удаленные изменения Вашего репозитория.
#
# Задача 2
#
# У вас снова запросили отчет по ошибкам в играх. Теперь отчет необходимо предоставить о количестве багов в каждой игре.
# Для этого отсортируйте данные из файла game.txt по столбцу  игры в алфавитном порядке с помощью быстрой сортировки.
# После этого предоставьте отчет в формате:
# <Игра 1> - количество багов: <count>
#
# ….
#
# <Игра N> - количество багов: <count>
#
# Где N - количество уникальных игр.
#
# Не забудьте сделать комментарии к коду согласно стандартам документирования кода выбранного языка.
# После выполнения необходимо сделать локальные и удаленные изменения Вашего репозитория
#
# Задача 3
#
# Ввод:  стандартный ввод
#
# Вывод: стандартный вывод
#
# Пришло время сделать наработку для интерфейса, который будет взаимодействовать с базой данных.
# Для этого Вам необходимо написать консольную программу, которая будет запрашивать у Вас имя персонажа,
# а на выход будет выдавать список игр, в которых встречается этот персонаж
# (ограничьте количество вывода элементов до 5),
# если ничего не найдено будет выводить: “Этого персонажа не существует”. Программа должна всегда запрашивать название.
# Прекратить свою работу она сможет только после ввода “game”.
#
# Поиск необходимо осуществить с помощью двоичного алгоритма поиска.
#
# Обратите внимание, что данные в файле не отсортированы! Для сортировки воспользуйтесь встроенными сортировками или
# напишите собственный алгоритм.
#
# Формат ответа на запрос пользователя:
#
# “Персонаж <characters> встречается в играх:
#
# <Игра 1>
#
# …
#
# <Игра 5>
#
# и др.”
#
# Строчка “и др.” должна писать только в случае, если значений больше чем пять.
#
# Поиск необходимо осуществлять в файле game.txt
#
# Не забудьте сделать комментарии к коду согласно стандартам документирования кода выбранного языка. После выполнения
# необходимо сделать локальные и удаленные изменения Вашего репозитория
#
# Задача 4
#
# При просмотре логов вы увидели, что в одной игре может быть несколько ошибок. Вам необходимо добавить счетчик того,
# сколько ошибок выявлено в игре. Реализуйте методы/функции, которые будут считать количество упоминаний какой-либо
# игры. Полученный список игр необходимо отсортировать в порядке возрастания. При занесении данных в csv файл, счетчик
# необходимо применить ко всем строкам.
#
# “Starfield, Mila, MВКJ:537, 1233-11-19” → “ Starfield, Mila, MВКJ:537, 1233-11-19, 9”
#
# На вход подается файл game.txt, который необходимо записать в список, добавить счетчик для каждого элемента, после
# чего дополнить список счетчиками. Последним этапом полученный список записать в новый game_counter.csv  файл. Назвать
# новый столбец “counter”.
#
#
#
# Не забудьте сделать комментарии к коду согласно стандартам документирования кода выбранного языка. После выполнения
# необходимо сделать локальные и удаленные изменения Вашего репозитория.
# Задача 6
#
# Ваш код будет использоваться программистом, которого возьмут на работу, поэтому он должен быть правильно оформлен
# и выложен на GitHub. Весь написанный код должен быть задокументирован согласно стандартам документирования кода
# выбранного языка.
#
# Также необходимо оформить README.md для Вашего репозитория. Пункты, которые должны быть описаны:
#
# 1. Название проекта
#
# 2. Описание проекта
#
# 3. Оглавление (необязательно)
#
# 4. Как установить и запустить проект
#
# 5. Как использовать проект
#
# Запишите ответы в соответствии с номерами задач!
#
# Допускается использование текстовых редакторов как вспомогательных инструментов.
